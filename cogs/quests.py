import discord
from discord.ext import commands
from datetime import datetime, timedelta
import asyncio
import os
from config import QUESTS, TIMEZONE, QUESTS_CHANNEL, FAMILY_ROLE_ID
from views.quest_view import QuestView, load_status, save_status
from utils.general_utils import find_type

class Quests(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def formated_help_embed(self):
        embed = discord.Embed(
            title="üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —Å—ñ–º–µ–π–Ω–∏—Ö –∫–≤–µ—Å—Ç—ñ–≤",
            color=discord.Color.gold()
        )

        embed.add_field(
            name="üéØ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–≤–µ—Å—Ç—É",
            value=(
                "`!–∫–≤–µ—Å—Ç <–∫–≤–µ—Å—Ç> <—á–∞—Å> <–¥–∞—Ç–∞>` - —Å—Ç–≤–æ—Ä—é—î –∑–∞–∫–ª–∏–∫ —É —Ñ–æ—Ä—É–º—ñ\n"
            ),
            inline=False
        )

        embed.add_field(
            name="–ú–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∫–≤–µ—Å—Ç—ñ–≤",
            value=(
                "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–≤–µ—Å—Ç–∏ —Ç–∞ —ó—Ö –ø–æ–≤–Ω—ñ –Ω–∞–∑–≤–∏:\n" +
                "\n".join([f"‚Ä¢ `{key}` - {quest['full_name']}" for key, quest in QUESTS.items()])
            ),
            inline=False
        )


        embed.add_field(
            name="üìå –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö –∫–≤–µ—Å—Ç—ñ–≤",
            value="`!–∫–≤–µ—Å—Ç–∏` - –ø–æ–∫–∞–∑—É—î, —è–∫—ñ –∫–≤–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ, –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ, —É –ö–î –∞–±–æ —Ç—Ä–∏–≤–∞—é—Ç—å.",
            inline=False
        )

        embed.set_footer(text="üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—ñ –∫–æ–º–∞–Ω–¥–∏, —â–æ–± –∫–µ—Ä—É–≤–∞—Ç–∏ —Å—ñ–º–µ–π–Ω–∏–º–∏ –∫–≤–µ—Å—Ç–∞–º–∏ —Ç–∞ –±–∞—á–∏—Ç–∏ —ó—Ö —Å—Ç–∞—Ç—É—Å–∏.\n‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç —á–∞—Å—É: –≥–≥:—Ö—Ö, —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: –¥–¥.–º–º")

        return embed
    
    @commands.command(name="–∫–≤–µ—Å—Ç")
    async def create_quest(self, ctx, *, args_str: str = None):
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –∫–≤–µ—Å—Ç-–∑–∞–∫–ª–∏–∫ —É —Ñ–æ—Ä—É–º—ñ."""

        if not args_str:
            embed = self.formated_help_embed()
            msg = await ctx.send(embed=embed)
            await asyncio.sleep(20)
            await msg.delete()
            await ctx.message.delete()
            return
        
        words = args_str.split()
        quest_key = None
        start_time = None
        start_date = None

        for i in range(len(words), 0, -1):
            quest_type = " ".join(words[:i])
            found_type = find_type(quest_type, QUESTS)
            if found_type:
                quest_key = found_type
                remaining_args = words[i:]
                if len(remaining_args) >= 2:
                    start_time = remaining_args[0]
                    start_date = remaining_args[1]
                break

        if not quest_key or quest_key not in QUESTS:
            embed = self.formated_help_embed()
            msg = await ctx.send(embed=embed)
            await asyncio.sleep(20)
            await msg.delete()
            await ctx.message.delete()
            return
    
        quest = QUESTS.get(quest_key)
        if not quest:
            msg = await ctx.send("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∫–≤–µ—Å—Ç. –î–æ—Å—Ç—É–ø–Ω—ñ: " + ", ".join(QUESTS.keys()))
            await asyncio.sleep(5)
            await msg.delete()
            await ctx.message.delete()
            return

        statuses = load_status()
        s = statuses.get(quest_key)
        now = datetime.now(TIMEZONE)

        can_schedule = False

        # –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –≤–∫–∞–∑–∞–Ω—É –¥–∞—Ç—É/—á–∞—Å (—Ñ–æ—Ä–º–∞—Ç: "–¥–¥.–º–º" —Ç–∞ "–≥–≥:—Ö—Ö").
        requested_start = None
        if start_time and start_date:
            try:
                parsed = datetime.strptime(f"{start_date} {start_time}", "%d.%m %H:%M")
                requested_start = parsed.replace(year=now.year, tzinfo=TIMEZONE)
            except Exception:
                requested_start = None

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–æ—ó –¥–∞—Ç–∏/—á–∞—Å—É (—è–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞) –∞–±–æ now
        if s:
            if s.get("status") == "cooldown":
                cd_end = datetime.fromisoformat(s["cooldown_end"])
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∫–∞–∑–∞–≤ —á–∞—Å –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è ‚Äî –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –Ω–∏–º
                if requested_start:
                    if requested_start < cd_end:
                        await ctx.send(f"‚è≥ –ö–≤–µ—Å—Ç –Ω–∞ –∫—É–ª–¥–∞—É–Ω—ñ –¥–æ {cd_end.strftime('%H:%M %d.%m')}. –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –ø—ñ—Å–ª—è —Ü—ñ—î—ó –¥–∞—Ç–∏.", delete_after=7)
                        await ctx.message.delete()
                        return
                    # —è–∫—â–æ requested_start >= cd_end ‚Äî –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–ª–∞–Ω—É–≤–∞—Ç–∏, –∞–ª–µ –ù–ï –∑–º—ñ–Ω—é—î–º–æ cooldown_end
                    can_schedule = True
                else:
                    # –±–µ–∑ –≤–∫–∞–∑–∞–Ω–æ—ó –¥–∞—Ç–∏ ‚Äî –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ —è–∫ —Ä–∞–Ω—ñ—à–µ: –∑–∞–±–æ—Ä–æ–Ω—è—î–º–æ —è–∫—â–æ –∫—É–ª–¥–∞—É–Ω —â–µ —Ç—Ä–∏–≤–∞—î
                    if now < cd_end:
                        await ctx.send(f"‚è≥ –ö–≤–µ—Å—Ç —â–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω—ñ –¥–æ {cd_end.strftime('%H:%M %d.%m')}!", delete_after=5)
                        await ctx.message.delete()
                        return
                    else:
                        s["status"] = "available"
            elif s.get("status") == "started":
                end_time = datetime.fromisoformat(s["end_time"])
                # –ø—Ä–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—ñ –≤—Ä–∞—Ö–æ–≤—É—î–º–æ requested_start —è–∫—â–æ —î
                cmp_time = requested_start or now
                if cmp_time < end_time:
                    await ctx.send(f"‚ö†Ô∏è –ö–≤–µ—Å—Ç —É–∂–µ –π–¥–µ –¥–æ {end_time.strftime('%H:%M %d.%m')}!", delete_after=5)
                    await ctx.message.delete()
                    return
                else:
                    cooldown_end = cmp_time + timedelta(hours=quest["cooldown_hours"])
                    s.update({"status": "cooldown", "cooldown_end": cooldown_end.isoformat()})
            elif s.get("status") == "scheduled":
                thread_id = s.get("thread_id")
                if thread_id:
                    await ctx.send(f"‚ö†Ô∏è –ö–≤–µ—Å—Ç —É–∂–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —É —Ñ–æ—Ä—É–º—ñ!", delete_after=5)
                    await ctx.message.delete()
                    return

        ####

        # –Ø–∫—â–æ –≤–∂–µ scheduled, –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º–æ thread_id, –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø–æ—Å—Ç
        guild = ctx.guild
        forum = guild.get_channel(QUESTS_CHANNEL)
        if not forum or not isinstance(forum, discord.ForumChannel):
            msg = await ctx.send("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∫–≤–µ—Å—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ —î —Ñ–æ—Ä—É–º–æ–º.", delete_after=5)
            await ctx.message.delete()
            return

        title = f"{quest['full_name']} {start_time} / {start_date}"
        embed = discord.Embed(
            # title=ctx.guild.get_role(FAMILY_ROLE_ID).mention,
            description=quest["description"],
            color=discord.Color.orange()
        )
        embed.set_footer(text="–°—Ç–∞—Ç—É—Å: üîµ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ")

        if quest["image"]:
            embed.set_image(url=quest["image"])

        view = QuestView(quest_key, ctx.author.id)

        # if not s or s.get("status") == "available":
        if can_schedule or not s or s.get("status") == "available":

            thread = await forum.create_thread(
                name=title,
                content=f"{ctx.guild.get_role(FAMILY_ROLE_ID).mention}",
                embed=embed,
                view=view
            )
            
            thread_id = thread.thread.id
            s = s or {}

            s.update({
                "status": "scheduled",
                "thread_id": thread_id,
                "start_time": requested_start.isoformat() if requested_start else None,
                "end_time": None,
                # –Ω–µ —á—ñ–ø–∞—î–º–æ "cooldown_end" —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –ö–î
            })
            statuses[quest_key] = s
            save_status(statuses)

            msg = await ctx.send(f"‚úÖ –ö–≤–µ—Å—Ç **{quest['full_name']}** —Å—Ç–≤–æ—Ä–µ–Ω–æ —É —Ñ–æ—Ä—É–º—ñ {forum.mention}", delete_after=5)
            await ctx.message.delete()

    @commands.command(name="–∫–≤–µ—Å—Ç–∏")
    async def list_quests(self, ctx):
        """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —É—Å—ñ—Ö –∫–≤–µ—Å—Ç—ñ–≤ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–º–∏ —Ä—è–¥–∫–∞–º–∏."""
        statuses = load_status()
        now = datetime.now(TIMEZONE)
        lines = []

        # –í–∏–∑–Ω–∞—á–∏–º–æ emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å—ñ–≤
        STATUS_EMOJI = {
            "available": "üü¢",
            "started": "üü°",
            "scheduled": "üîµ",
            "cooldown": "üî¥"
        }

        embed = discord.Embed(
            title="üìã –°—Ç–∞—Ç—É—Å —Å—ñ–º–µ–π–Ω–∏—Ö –∫–≤–µ—Å—Ç—ñ–≤",
            description="\n".join(lines),
            color=discord.Color.gold()
        )

        for key, quest in QUESTS.items():
            status = statuses.get(key)
            if not status:
                # –Ø–∫—â–æ –∑–∞–ø–∏—Å—É –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
                status = {
                    "thread_id": None,
                    "start_time": None,
                    "end_time": None,
                    "cooldown_end": None,
                    "created_at": now.isoformat(),
                    "status": "available"
                }
                statuses[key] = status
                save_status(statuses)

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç–∞ –∫–æ–ª—å–æ—Ä–æ–≤–∏–π emoji
            emoji = STATUS_EMOJI.get(status["status"], "‚ö™")
            status_text = ""
            
            if status["status"] == "started":
                end = datetime.fromisoformat(status["end_time"])
                status_text = f"—Ç—Ä–∏–≤–∞—î (–¥–æ {end.strftime('%H:%M')})"
            elif status["status"] == "scheduled":
                status_text = "–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ"
            elif status["status"] == "cooldown":
                cd_end = datetime.fromisoformat(status["cooldown_end"])
                if cd_end > now:
                    status_text = f"—É –ö–î –¥–æ {cd_end.strftime('%H:%M %d.%m')}"
                else:
                    # –ö–î –≤–∂–µ –º–∏–Ω—É–≤, —Ä–æ–±–∏–º–æ –¥–æ—Å—Ç—É–ø–Ω–∏–º
                    status_text = "–¥–æ—Å—Ç—É–ø–Ω–∏–π!"
                    status["status"] = "available"
                    save_status(statuses)
                    emoji = STATUS_EMOJI["available"]
            elif status["status"] == "available":
                status_text = "–¥–æ—Å—Ç—É–ø–Ω–∏–π!"

            # –§–æ—Ä–º—É—î–º–æ –≥–∞—Ä–Ω—É —Ä—è–¥–∫–æ–≤—É –∫–∞—Ä—Ç–∫—É –∑ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è–º
            embed.add_field(
                name=f"**{quest['full_name']}**",
                value=f"`{emoji}` {status_text}",
                inline=False
            )

        msg = await ctx.send(embed=embed)
        await ctx.message.delete()
        await asyncio.sleep(120)
        await msg.delete()

    @commands.command(name="—Å–∫–∏–Ω—É—Ç–∏_–∫–≤–µ—Å—Ç")
    async def reset_quest(self, ctx, quest_key: str):
        """‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —É –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö"""
        statuses = load_status()
        s = statuses.get(quest_key)
        if not s:
            await ctx.send(f"‚ùå –ö–≤–µ—Å—Ç {quest_key} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", ephemeral=True)
            return

        s["status"] = "available"
        s.pop("start_time", None)
        s.pop("end_time", None)
        s.pop("cooldown_end", None)
        save_status(statuses)
        msg = await ctx.send(f"‚úÖ –ö–≤–µ—Å—Ç {quest_key} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —É –¥–æ—Å—Ç—É–ø–Ω–∏–π —Å—Ç–∞—Ç—É—Å.", ephemeral=True)
        await ctx.message.delete()
        await asyncio.sleep(5)
        await msg.delete()

async def setup(bot):
    await bot.add_cog(Quests(bot))