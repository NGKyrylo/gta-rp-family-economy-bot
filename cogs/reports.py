import discord
from discord.ext import commands
import asyncio
from datetime import datetime, timezone

from utils.general_utils import parse_report_date, find_type
from views.report_views import ConfirmReportView
from utils.db_utils import Database

from config import REPORT_CHANNELS, ADMIN_ROLE_ID, REPORT_TYPES, POINT_COST

class Reports(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()

    def formated_help_embed(self):
        # Create embed
        embed = discord.Embed(
            title="üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏",
            color=discord.Color.gold()
        )

        # Group activities
        family_quests = []
        activities = []
            
        for cmd, info in REPORT_TYPES.items():
            if cmd == "–≤–Ω–µ—Å–æ–∫":
                donation_help = "\n".join(info["help"])
                continue
                    
            if info.get("is_family_quest"):
                family_quests.append(info["help"])
            else:
                activities.append(info["help"])

        # Add fields to embed
        embed.add_field(
            name="üéØ –°—ñ–º–µ–π–Ω—ñ –∫–≤–µ—Å—Ç–∏",
            value="\n".join(family_quests) or "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–≤–µ—Å—Ç—ñ–≤",
            inline=False
        )
            
        embed.add_field(
            name="üìù –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ",
            value="\n".join(activities) or "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π",
            inline=False
        )
            
        embed.add_field(
            name="üí∞ –í–Ω–µ—Å–∫–∏",
            value=donation_help,
            inline=False
        )
            
        embed.set_footer(text="‚ùó –î–æ –∫–æ–∂–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –¥–æ–¥–∞–≤–∞–π—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç")

        return embed

    @commands.command(name="–∑–≤—ñ—Ç")
    async def report(self, ctx, *, args_str: str = None):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–≤—ñ—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"""

        if not args_str:
            embed = self.formated_help_embed()
            msg = await ctx.send(embed=embed)
            await asyncio.sleep(20)
            await msg.delete()
            await ctx.message.delete()
            return

        # Split into words and find report type
        words = args_str.split()
        report_type = None
        remaining_args = []

        # Try different word combinations from start
        for i in range(len(words), 0, -1):
            test_type = " ".join(words[:i])
            found_type = find_type(test_type, REPORT_TYPES)
            if found_type:
                report_type = found_type
                remaining_args = words[i:]
                break
        
        # Check report type
        if not report_type or report_type not in REPORT_TYPES:
            embed = self.formated_help_embed()
            # Send embed
            msg = await ctx.send(embed=embed)
            await asyncio.sleep(20)
            await msg.delete()
            await ctx.message.delete()
            return

        r_type = REPORT_TYPES[report_type]
        category = r_type["category"]
        report_channel_id = REPORT_CHANNELS[category]

        # Handle different report types
        if report_type == "–≤–Ω–µ—Å–æ–∫":
            if len(remaining_args) < 2:
                msg = await ctx.send("‚ùå –í–∫–∞–∂—ñ—Ç—å —Å—É–º—É —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–Ω–µ—Å–∫—É!")
                await asyncio.sleep(5)
                await msg.delete()
                await ctx.message.delete()
                return
            
            try:
                amount = float(remaining_args[0])
                purpose = " ".join(remaining_args[1:])

                # Calculate points if purpose is "–ø–æ—ñ–Ω—Ç–∏"
                if purpose.lower() == "–ø–æ—ñ–Ω—Ç–∏":
                    points = int(amount // POINT_COST)
                    if points == 0:
                        msg = await ctx.send(f"‚ùå –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª—ñ–≤: {POINT_COST:,}$")
                        await asyncio.sleep(5)
                        await msg.delete()
                        await ctx.message.delete()
                        return
                
                report_date = parse_report_date(None)

                report_text = [
                    f"üíµ **–í–Ω–µ—Å–æ–∫:** {amount:,.2f}$",
                    f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {ctx.author.mention}",
                    f"üìã **–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:** {purpose}"
                ]
                
                if purpose.lower() == "–ø–æ—ñ–Ω—Ç–∏":
                    report_text.append(f"üí∞ **–ü–æ—ñ–Ω—Ç–∏:** {points}")
                    remainder = amount % POINT_COST
                    if remainder > 0:
                        report_text.append(f"‚ÑπÔ∏è _–ó–∞–ª–∏—à–æ–∫ {remainder:,.2f}$ –Ω–µ –≤—Ä–∞—Ö–æ–≤–∞–Ω–æ —É –±–∞–ª–∏_")

            except ValueError:
                msg = await ctx.send("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞ –≤–Ω–µ—Å–∫—É!")
                await asyncio.sleep(5)
                await msg.delete()
                await ctx.message.delete()
                return

        elif report_type == "–¥–æ–ø–æ–º–æ–≥–∞":
            if not remaining_args or remaining_args[0] not in r_type["variants"]:
                variants = "/".join(r_type["variants"].keys())
                msg = await ctx.send(f"‚ùå –í–∫–∞–∂–∏ —Ç–∏–ø –¥–æ–ø–æ–º–æ–≥–∏: {variants}")
                await asyncio.sleep(5)
                await msg.delete()
                await ctx.message.delete()
                return
                
            variant = r_type["variants"][remaining_args[0]]
            date_str = remaining_args[1] if len(remaining_args) > 1 else None
            
            # Check screenshots count
            if len(ctx.message.attachments) < variant["required_screenshots"]:
                msg = await ctx.send(f"‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ {variant['required_screenshots']} —Å–∫—Ä—ñ–Ω—à–æ—Ç{'–∏' if variant['required_screenshots'] > 1 else ''}!")
                await asyncio.sleep(5)
                await msg.delete()
                await ctx.message.delete()
                return
                
            report_date = parse_report_date(date_str)
            if not report_date:
                msg = await ctx.send("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞! –§–æ—Ä–º–∞—Ç: –¥–¥.–º–º")
                await asyncio.sleep(5)
                await msg.delete()
                await ctx.message.delete()
                return
            
            points = variant["points"]
                
            report_text = [
                f"üìù **–ó–≤—ñ—Ç:** {r_type['label']}{' - ' + variant['label'] if variant['label'] != '' else ''} ({report_date})",
                f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {ctx.author.mention}"
            ]

        elif r_type.get("requires_hours"):
            if not remaining_args or not remaining_args[0].isdigit():
                msg = await ctx.send("‚ùå –í–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤–Ω–∏—Ö –≥–æ–¥–∏–Ω –ø–∞—Ç—Ä—É–ª—è!")
                await asyncio.sleep(5)
                await msg.delete()
                await ctx.message.delete()
                return
            
            hours = int(remaining_args[0])
            date_str = remaining_args[1] if len(remaining_args) > 1 else None
            report_date = parse_report_date(date_str)
            
            if not report_date:
                msg = await ctx.send("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞! –§–æ—Ä–º–∞—Ç: –¥–¥.–º–º")
                await asyncio.sleep(5)
                await msg.delete()
                await ctx.message.delete()
                return
            
            points = hours * r_type["points_per_hour"]
                
            report_text = [
                f"üìù **–ó–≤—ñ—Ç:** {r_type['label']} ({report_date})",
                f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {ctx.author.mention}",
                f"‚è∞ **–ì–æ–¥–∏–Ω:** {hours}"
            ]

        else:
            # Regular reports
            date_str = remaining_args[0] if remaining_args else None
            report_date = parse_report_date(date_str)
            
            if not report_date:
                msg = await ctx.send("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞! –§–æ—Ä–º–∞—Ç: –¥–¥.–º–º")
                await asyncio.sleep(5)
                await msg.delete()
                await ctx.message.delete()
                return
            
            points = r_type.get("points", 0)
                
            report_text = [
                f"üìù **–ó–≤—ñ—Ç:** {r_type['label']} ({report_date})",
                f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {ctx.author.mention}"
            ]

        # Check for screenshots
        if not ctx.message.attachments:
            msg = await ctx.send("‚ùå –î–æ–¥–∞–π —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–æ –∑–≤—ñ—Ç—É.")
            await asyncio.sleep(5)
            await msg.delete()
            await ctx.message.delete()
            return

        # Finalize report message
        report_text = "\n".join(report_text)
        report_text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

        # Save report data before sending
        report_data = {
            "user_id": ctx.author.id,
            "type": report_type,
            "points": points if "points" in locals() else 0,
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "report_date": report_date
        }

        # Send report
        files = [await att.to_file() for att in ctx.message.attachments]
        report_channel = self.bot.get_channel(report_channel_id)
        view = ConfirmReportView(admin_role_id=ADMIN_ROLE_ID)
        report_msg = await report_channel.send(content=report_text, files=files, view=view)

        # Save report with message ID
        self.db.save_report(report_msg.id, report_data)
        
        await ctx.message.delete()
        msg = await ctx.send("‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        await asyncio.sleep(5)
        await msg.delete()

async def setup(bot):
    await bot.add_cog(Reports(bot))